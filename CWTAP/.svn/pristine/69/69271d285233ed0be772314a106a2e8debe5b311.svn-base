import json, time
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from .models import KeywordBase, Keyword
from cwtap.tests import create_instances


tenant = create_instances([{"name": "租户01", "code": "tenant01"}], "Tenant")[0]

user = create_instances([{"name": "用户01", "tenant": tenant}], "User")[0]

aoj = create_instances([{"name": "机构01", "owner": user,
                         "tenant": tenant}], "AreaOfJob")[0]

keywordbase = create_instances([{"name": "机构01", "owner": user,
                                 "tenant": tenant, "area_of_job": aoj}],
                               "KeywordBase")[0]


class KeywordBaseTest(APITestCase):
    """ 测试关键词库表 """

    def test_keywordbase_create(self):
        """ 测试关键词库创建 """
        url = reverse("keywords:keywordbase-list")
        data = {"name": "词库00",
                "code": "keywordbase00"}

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(["This field is required."],
                         json.loads(response.content)["type"])

        data = {"name": "词库01",
                "code": "keywordbase01",
                "type": "类型01"}

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("词库01", json.loads(response.content)["name"])

        response = self.client.get(url)

        self.assertEqual("词库01", json.loads(response.content)[0]["name"])

    def test_keywordbase_delete(self):
        """ 测试关键词库删除 """
        keywordbases = create_instances([
            {
            "name": "词库02",
            "code": "keywordbase02",
            "details": "你好，词库02",
            "type": "类型02"},
            {
                "name": "词库03",
                "code": "keywordbase03",
                "details": "你好，词库03",
                "type": "类型03",
            }
        ], "KeywordBase")

        id_1 = keywordbases[0].id
        id_2 = keywordbases[1].id

        self.assertEqual("词库02", KeywordBase.objects.get(id=id_1).name)
        self.assertEqual(2, len(KeywordBase.objects.all()))

        url = reverse("keywords:keywordbase-detail", args=(id_1,))

        response = self.client.delete(url)

        self.assertEqual(1, len(KeywordBase.objects.all()))
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual("词库03", KeywordBase.objects.get(id=id_2).name)

    def test_keywordbase_update(self):
        """ 测试关键词库修改 """
        keywordbases = create_instances([{
            "name": "词库_0401",
            "code": "keywordbase_0401",
            "details": "你好，词库_0401",
            "type": "类型_0401",
        },
            {
                "name": "词库_0402",
                "code": "keywordbase_0402",
                "details": "你好，词库_0402",
                "type": "类型_0402",
            }
        ], "KeywordBase")

        id_1 = keywordbases[0].id
        id_2 = keywordbases[1].id

        self.assertEqual("词库_0401", KeywordBase.objects.get(id=id_1).name)
        self.assertEqual(2, len(KeywordBase.objects.all()))

        url = reverse("keywords:keywordbase-detail", args=(id_2,))

        data = {
            "name": "词库_0402修改",
            "code": "keywordbase_0402修改",
            "details": "你好，词库_0402修改",
            "type": "类型_0402"}

        response = self.client.put(url, data)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("词库_0401", KeywordBase.objects.get(id=id_1).name)
        self.assertEqual("词库_0402修改", KeywordBase.objects.get(id=id_2).name)

    def test_keywordbase_timeupdate(self):
        """ 测试关键词库时间修改 """
        keywords = create_instances([
            {"name": "词库_00", "code": "keywordbase_00",
             "type": "类型_00"}], "KeywordBase")[0]

        created, modified = keywords.created, keywords.modified

        time.sleep(1)
        keywords.name = "词库_00_修改"

        keywords.save()

        self.assertEqual(keywords.created, created)
        self.assertTrue(keywords.modified > modified)

    def test_keywordbase_query(self):
        """ 测试关键词库查询 """
        keywords = create_instances([
            {"name": "词库05", "code": "keywordbase05", "type": "类型05"}],
            "KeywordBase")

        url = "{0}?{1}".format(reverse("keywords:keywordbase-list"),
                               "name=词库05")

        response = self.client.get(url)

        query_result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(keywords[0].name, query_result[0]["name"])

    def test_keywordbase_aoj_user_relations(self):
        """ 测试关键词库与机构领域与用户与租户与关联关系 """
        keywordbases = create_instances([
            {
                "name": "词库06",
                "code": "keywordbase06",
                "type": "类型06",
                "owner": user,
                "tenant": tenant,
                "area_of_job": aoj,
            },
            {
                "name": "词库07",
                "code": "keywordbase07",
                "type": "类型07",
                "owner": user,
                "tenant": tenant,
                "area_of_job": aoj,
            }
        ], "KeywordBase")

        # 测试词库和租户间的关系
        self.assertEqual("租户01", keywordbases[1].tenant.name)
        self.assertEqual(keywordbases[0].tenant, keywordbases[1].tenant)
        self.assertEqual(keywordbases[0].tenant.name, tenant.name)
        # 测试词库和用户间的关系
        self.assertEqual("用户01", keywordbases[1].owner.name)
        self.assertEqual(keywordbases[0].owner, keywordbases[1].owner)
        self.assertEqual(keywordbases[0].owner.name, user.name)
        # 测试词库和机构领域的关系
        self.assertEqual("机构01", keywordbases[1].area_of_job.name)
        self.assertEqual(keywordbases[0].area_of_job,
                         keywordbases[1].area_of_job)
        self.assertEqual(keywordbases[0].area_of_job.name, aoj.name)
        # 测试词库中租户和用户间的关系
        self.assertEqual(tenant.name, user.tenant.name)
        self.assertEqual(keywordbases[1].owner.tenant.name, tenant.name)


class KeywordTest(APITestCase):
    """ 测试关键词表 """

    def test_keyword_create(self):
        """ 测试关键词创建 """
        url = reverse("keywords:keyword-list")

        data = {"name": "关键词00"}

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

        data = {"name": "关键词01",
                "pos": "pos01",
                "statut": "实体01",
                "emotion": "情感01",
                "level": "level_01",
                "originate_object": "关键词来源01"}

        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("关键词01", json.loads(response.content)["name"])

        response = self.client.get(url)

        self.assertEqual("关键词01", json.loads(response.content)[0]["name"])

    def test_keyword_delete(self):
        """ 测试关键词删除 """
        keywords = create_instances([
            {
                "name": "关键词02",
                "pos": "pos02",
                "statut": "实体02",
                "emotion": "情感02",
                "level": "level_02",
                "originate_object": "关键词来源02"
                },
            {
                "name": "关键词03",
                "pos": "pos03",
                "statut": "实体03",
                "emotion": "情感03",
                "level": "level_03",
                "originate_object": "关键词来源03"
                }
        ], "Keyword")

        id_1 = keywords[0].id
        id_2 = keywords[1].id

        self.assertEqual(2, len(Keyword.objects.all()))
        self.assertEqual("关键词02", Keyword.objects.get(id=id_1).name)

        url = reverse("keywords:keyword-detail", args=(id_1,))
        response = self.client.delete(url)

        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(1, len(Keyword.objects.all()))
        self.assertEqual("关键词03", Keyword.objects.get(id=id_2).name)

    def test_keyword_update(self):
        """ 测试关键词修改 """
        keywords = create_instances([
            {"name": "关键词_0401",
             "pos": "pos_0401",
             "statut": "实体_0401",
             "emotion": "情感_0401",
             "level": "level_0401",
             "originate_object": "关键词来源_0401"
             },
            {"name": "关键词_0402",
             "pos": "pos_0402",
             "statut": "实体_0402",
             "emotion": "情感_0402",
             "level": "level_0402",
             "originate_object": "关键词来源_0402"
             }
        ], "Keyword")

        id_1 = keywords[0].id
        id_2 = keywords[1].id

        self.assertEqual(2, len(Keyword.objects.all()))
        self.assertEqual("关键词_0401", Keyword.objects.get(id=id_1).name)

        url = reverse("keywords:keyword-detail", args=(id_2,))

        data = {"name": "关键词_0402修改",
                "pos": "pos_0402修改",
                "statut": "实体_0402修改",
                "emotion": "情感_0402修改",
                "level": "level_0402修改",
                "originate_object": "关键词来源_0402修改"}

        response = self.client.put(url, data)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("关键词_0401", Keyword.objects.get(id=id_1).name)
        self.assertEqual("关键词_0402修改", Keyword.objects.get(id=id_2).name)

    def test_keyword_query(self):
        """ 测试关键词查询 """
        keywords = create_instances([{"name": "关键词05"}], "Keyword")

        url = "{0}?{1}".format(reverse("keywords:keyword-list"),
                               "name=关键词05")

        response = self.client.get(url)

        query_result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(keywords[0].name, query_result[0]["name"])

    def test_keyword_keywordbase_user_relations(self):
        """ 测试关键词与关键词库与用户与租户与关联关系"""
        keywords = create_instances([
            {
                "name": "关键词06",
                "pos": "pos06",
                "statut": "实体06",
                "emotion": "情感06",
                "level": "level_06",
                "originate_object": "关键词来源06",
                "owner": user,
                "tenant": tenant,
                "keywordbase": keywordbase,
            },
            {
                "name": "关键词07",
                "pos": "pos07",
                "statut": "实体07",
                "emotion": "情感07",
                "level": "level_07",
                "originate_object": "关键词来源07",
                "owner": user,
                "tenant": tenant,
                "keywordbase": keywordbase,
            }
        ], "Keyword")

        # 测试关键词和租户间的关系
        self.assertEqual("租户01", keywords[1].tenant.name)
        self.assertEqual(keywords[0].tenant, keywords[1].tenant)
        self.assertEqual(keywords[0].tenant.name, tenant.name)
        # 测试关键词和用户间的关系
        self.assertEqual("用户01", keywords[1].owner.name)
        self.assertEqual(keywords[0].owner, keywords[1].owner)
        self.assertEqual(keywords[0].owner.name, user.name)
        # 测试关键词和关键词库的关系
        self.assertEqual("机构01", keywords[1].keywordbase.name)
        self.assertEqual(keywords[0].keywordbase, keywords[1].keywordbase)
        self.assertEqual(keywords[0].keywordbase.name, keywordbase.name)
        # 测试关键词中租户和用户间的关系
        self.assertEqual(tenant.name, user.tenant.name)
        self.assertEqual(keywords[1].owner.tenant.name, tenant.name)