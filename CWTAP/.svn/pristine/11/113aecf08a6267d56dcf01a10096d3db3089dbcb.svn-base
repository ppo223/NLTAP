import json, time
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from users.models import Tenant, User
from area_of_jobs.models import AreaOfJob
from .models import KeyWordBase


class KeyWordBaseTest(APITestCase):

    def create_tenants(self, tenants):
        result = []
        for tenant in tenants:
            t = Tenant(**tenant)
            t.save()
            result.append(t)

        return result

    def create_users(self, users):
        result = []
        for user in users:
            u = User(**user)
            u.save()
            result.append(u)

        return result

    def create_aojs(self, aojs):
        result = []
        for aoj in aojs:
            a = AreaOfJob(**aoj)
            a.save()
            result.append(a)

        return result

    def create_keywords(self, keywords):
        result = []
        for kw in keywords:
            k = KeyWordBase(**kw)
            k.save()
            result.append(k)

        return result


    def test_keyword_create(self):
        """测试创建词库"""
        url = reverse("keyword:keywordbase-list")
        data = {"name": "词库00",
                "code": "keyword00",
                }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(["This field is required."], json.loads(response.content)["type"])

        data = {"name": "词库01",
                "code": "keyword01",
                "type": "类型01",
                }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("词库01", json.loads(response.content)["name"])
        response = self.client.get(url)
        self.assertEqual("词库01", json.loads(response.content)[0]["name"])

    def test_keyword_delete(self):
        """测试删除词库"""
        url = reverse("keyword:keywordbase-list")
        data = {
            "name": "词库02",
            "code": "keyword02",
            "details": "你好，词库02",
            "type": "类型02",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("词库02", json.loads(response.content)["name"])
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        url = reverse("keyword:keywordbase-list")
        data = {
            "name": "词库03",
            "code": "keyword03",
            "details": "你好，词库03",
            "type": "类型03",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        self.assertEqual(2, len(KeyWordBase.objects.all()))
        KeyWordBase.objects.filter(id=1).delete()
        self.assertEqual(1, len(KeyWordBase.objects.all()))
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("词库03", json.loads(response.content)[0]['name'])

        data = {"name": "词库02"}
        self.assertEqual(json.loads(self.client.get(url, data).content), [])

    def test_keywords_update(self):
        """测试修改词库"""
        url = reverse("keyword:keywordbase-list")
        data = {
            "name": "词库_0401",
            "code": "keyword_0401",
            "details": "你好，词库_0401",
            "type": "类型_0401",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("词库_0401", json.loads(response.content)["name"])

        data = {
            "name": "词库_0402",
            "code": "keyword_0402",
            "details": "你好，词库_0402",
            "type": "类型_0402",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("词库_0402", json.loads(response.content)["name"])
        self.assertEqual(2, len(json.loads(self.client.get(url).content)))  #顺便测试列表长度

        pk = json.loads(response.content)["id"]
        url = reverse("keyword:keywordbase-detail", args=(pk,))
        data = {
            "name": "词库_0402修改",
            "code": "keyword_0402修改",
            "details": "你好，词库_0402修改",
            "type": "类型_0402",
        }
        response = self.client.put(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("词库_0401", KeyWordBase.objects.get(id=1).name)
        self.assertEqual("词库_0402修改", KeyWordBase.objects.get(id=2).name)

    def test_keywords_timeupdate(self):
        """测试词库时间修改"""
        keywords = self.create_keywords([
            {"name": "词库_00", "code": "keyword_00", "type": "类型_00"},
        ])[0]
        created, modified = keywords.created, keywords.modified
        time.sleep(1)
        keywords.name = "词库_00_修改"
        keywords.save()

        self.assertEqual(keywords.created, created)
        self.assertTrue(keywords.modified > modified)

    def test_keywords_query(self):
        """ 测试查询词库 """
        keywords = self.create_keywords([
            {"name": "词库05", "code": "keyword05", "type": "类型05"},])
        url = "{0}?{1}".format(reverse("keyword:keywordbase-list"),
                               "name=词库05")
        response = self.client.get(url)
        query_result = json.loads(response.content)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(keywords[0].name, query_result[0]["name"])

    def test_keyword_aoj_user_relations(self):
        """测试词库与用户与租户与机构领域关联关系"""
        tenant = self.create_tenants([
            {"name": "租户01",
             "code": "tenant01",
             "type": "类型01"},
        ])[0]

        user = self.create_users([
            {
                "name": "用户01",
                "code": "user01",
                "email": "user01@mail.com",
                "password": "user123",
                "tenant": tenant
            },
        ])[0]

        aoj = self.create_aojs([
            {
                "name": "机构01",
                "code": "jigou01",
                "owner": user,
                "tenant": tenant,
            }
        ])[0]

        keywords = self.create_keywords([
            {
                "name": "词库06",
                "code": "keyword06",
                "type": "类型06",
                "owner": user,
                "tenant": tenant,
                "area_of_job": aoj,
            },
            {
                "name": "词库07",
                "code": "keyword07",
                "type": "类型07",
                "owner": user,
                "tenant": tenant,
                "area_of_job": aoj,
            }
        ])
        """测试词库和租户间的关系"""
        self.assertEqual(keywords[0].tenant, keywords[1].tenant)
        self.assertEqual(keywords[0].tenant.name, tenant.name)
        self.assertEqual(keywords[1].tenant.name, tenant.name)
        """测试词库和用户间的关系"""
        self.assertEqual(keywords[0].owner, keywords[1].owner)
        self.assertEqual(keywords[0].owner.name, user.name)
        self.assertEqual(keywords[1].owner.name, user.name)
        """测试词库和机构领域的关系"""
        self.assertEqual(keywords[0].area_of_job, keywords[1].area_of_job)
        self.assertEqual(keywords[0].area_of_job.name, aoj.name)
        self.assertEqual(keywords[1].area_of_job.name, aoj.name)
        """测试词库中租户和用户间的关系"""
        self.assertEqual(tenant.name, user.tenant.name)
        self.assertEqual(keywords[1].owner.tenant.name, tenant.name)
        self.assertEqual(keywords[1].owner.tenant.name, user.tenant.name)