import json, time
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from users.models import Tenant, User
from modelbase.models import ModelBase
from .models import Model


class ModelTest(APITestCase):

    def create_tenants(self, tenants):
        result = []
        for tenant in tenants:
            t = Tenant(**tenant)
            t.save()
            result.append(t)

        return result

    def create_users(self, users):
        result = []
        for user in users:
            u = User(**user)
            u.save()
            result.append(u)

        return result

    def create_modelbases(self, modelbases):
        result = []
        for modelbase in modelbases:
            _ = ModelBase(**modelbase)
            _.save()
            result.append(_)

        return result

    def create_models(self, models):
        result = []
        for _ in models:
            _ = Model(**_)
            _.save()
            result.append(_)

        return result


    def test_model_create(self):
        """测试创建模型"""
        url = reverse("model:model-list")
        data = {"name": "模型00",
                "code": "model00",
                }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(["This field is required."], json.loads(response.content)["type"])

        data = {"name": "模型01",
                "code": "model01",
                "type": "类型01",
                }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("模型01", json.loads(response.content)["name"])
        response = self.client.get(url)
        self.assertEqual("模型01", json.loads(response.content)[0]["name"])

    def test_model_delete(self):
        """测试删除模型"""
        url = reverse("model:model-list")
        data = {
            "name": "模型02",
            "code": "model02",
            "details": "你好，模型02",
            "type": "类型02",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("模型02", json.loads(response.content)["name"])
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        url = reverse("model:model-list")
        data = {
            "name": "模型03",
            "code": "model03",
            "details": "你好，模型03",
            "type": "类型03",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        self.assertEqual(2, len(Model.objects.all()))
        Model.objects.filter(id=1).delete()
        self.assertEqual(1, len(Model.objects.all()))
        response = self.client.get(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("模型03", json.loads(response.content)[0]['name'])

        data = {"name": "模型02"}
        self.assertEqual(json.loads(self.client.get(url, data).content), [])

    def test_models_update(self):
        """测试修改模型"""
        url = reverse("model:model-list")
        data = {
            "name": "模型_0401",
            "code": "model_0401",
            "details": "你好，模型_0401",
            "type": "类型_0401",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("模型_0401", json.loads(response.content)["name"])

        data = {
            "name": "模型_0402",
            "code": "model_0402",
            "details": "你好，模型_0402",
            "type": "类型_0402",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("模型_0402", json.loads(response.content)["name"])
        self.assertEqual(2, len(json.loads(self.client.get(url).content)))  #顺便测试列表长度

        pk = json.loads(response.content)["id"]
        url = reverse("model:model-detail", args=(pk,))
        data = {
            "name": "模型_0402修改",
            "code": "model_0402修改",
            "details": "你好，模型_0402修改",
            "type": "类型_0402",
        }
        response = self.client.put(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("模型_0401", Model.objects.get(id=1).name)
        self.assertEqual("模型_0402修改", Model.objects.get(id=2).name)

    def test_models_timeupdate(self):
        """测试模型时间修改"""
        models = self.create_models([
            {"name": "模型_00", "code": "model_00", "type": "类型_00"},
        ])[0]
        created, modified = models.created, models.modified
        time.sleep(1)
        models.name = "模型_00_修改"
        models.save()

        self.assertEqual(models.created, created)
        self.assertTrue(models.modified > modified)

    def test_models_query(self):
        """ 测试查询模型 """
        models = self.create_models([
            {"name": "模型05", "code": "model05", "type": "类型05"},])
        url = "{0}?{1}".format(reverse("model:model-list"),
                               "name=模型05")
        response = self.client.get(url)
        query_result = json.loads(response.content)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(models[0].name, query_result[0]["name"])

    def test_model_aoj_user_relations(self):
        """测试模型与用户与租户与机构领域关联关系"""
        tenant = self.create_tenants([
            {"name": "租户01",
             "code": "tenant01",
             "type": "类型01"},
        ])[0]

        user = self.create_users([
            {
                "name": "用户01",
                "code": "user01",
                "email": "user01@mail.com",
                "password": "user123",
                "tenant": tenant
            },
        ])[0]

        modelbase = self.create_modelbases([
            {
                "name": "机构01",
                "code": "jigou01",
                "owner": user,
                "tenant": tenant,
            }
        ])[0]

        models = self.create_models([
            {
                "name": "模型06",
                "code": "model06",
                "type": "类型06",
                "owner": user,
                "tenant": tenant,
                "modelbase": modelbase,
            },
            {
                "name": "模型07",
                "code": "model07",
                "type": "类型07",
                "owner": user,
                "tenant": tenant,
                "modelbase": modelbase,
            }
        ])
        """测试模型和租户间的关系"""
        self.assertEqual(models[0].tenant, models[1].tenant)
        self.assertEqual(models[0].tenant.name, tenant.name)
        self.assertEqual(models[1].tenant.name, tenant.name)
        """测试模型和用户间的关系"""
        self.assertEqual(models[0].owner, models[1].owner)
        self.assertEqual(models[0].owner.name, user.name)
        self.assertEqual(models[1].owner.name, user.name)
        """测试模型和模型库的关系"""
        self.assertEqual(models[0].modelbase, models[1].modelbase)
        self.assertEqual(models[0].modelbase.name, modelbase.name)
        self.assertEqual(models[1].modelbase.name, modelbase.name)
        """测试模型中租户和用户间的关系"""
        self.assertEqual(tenant.name, user.tenant.name)
        self.assertEqual(models[1].owner.tenant.name, tenant.name)
        self.assertEqual(models[1].owner.tenant.name, user.tenant.name)