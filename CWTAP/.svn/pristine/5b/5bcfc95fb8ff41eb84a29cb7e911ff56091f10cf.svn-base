import json
import time

from django.utils import timezone
from django.urls import reverse
from django.conf import settings
from django.forms.models import model_to_dict
from rest_framework import status
from rest_framework.test import APITestCase

from .models import Tenant, User
from cwtap.tests import create_instances


class TenantTest(APITestCase):

    def test_create_tenant(self):
        """ 测试创建租户 """
        url = reverse("management:tenant-list")
        data = {
            "name": "租户_001",
            "code": "tenant_001",
            "type": "类型_001",
            "details": "这里是租户_001",
        }
        response = self.client.post(url, data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        pk = json.loads(response.content)["id"]
        t = Tenant.objects.get(pk=pk)

        self.assertEqual(data["name"], t.name)
        self.assertEqual(data["code"], t.code)
        self.assertEqual(data["type"], t.type)
        self.assertEqual(data["details"], t.details)
        self.assertEqual(settings.STATUS_ENABLE, t.status)

    def test_list_tenant(self):
        """ 测试获取租户列表 """
        create_instances([
            {"name": "租户_002", "code": "tenant_002", "type": "类型_002"},
            {"name": "租户_003", "code": "tenant_003", "type": "类型_003"},
        ], "Tenant")

        response = self.client.get(reverse("management:tenant-list"))

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))

    def test_update_tenant(self):
        """ 测试更新租户 """
        tenants = create_instances([
            {"name": "租户_004", "code": "tenant_004", "type": "类型_004"},
            {"name": "租户_005", "code": "tenant_005", "type": "类型_005"},
        ], "Tenant")
        tenant_004 = model_to_dict(tenants[0])

        self.assertEqual("租户_004", tenant_004["name"])

        url = reverse("management:tenant-detail", args=(tenant_004["id"],))
        tenant_004["name"] = "租户_004_修改"
        response = self.client.put(url, tenant_004)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(
            "租户_004_修改", Tenant.objects.get(pk=tenant_004["id"]).name)

    def test_tenant_update_auto_now(self):
        """ 测试 modified 字段 auto_now 属性 """
        tenant = create_instances([
            {"name": "租户_006", "code": "tenant_006", "type": "类型_006"},
        ], "Tenant")[0]
        created, modified = tenant.created, tenant.modified
        time.sleep(1)
        tenant.name = "租户_006_修改"
        tenant.save()

        self.assertEqual(tenant.created, created)
        self.assertTrue(tenant.modified > modified)

    def test_delete_tenant(self):
        """ 测试删除租户 """
        tenant = create_instances([
            {"name": "租户_007", "code": "tenant_007", "type": "类型_007"},
        ], "Tenant")[0]
        url = reverse("management:tenant-detail", args=(tenant.id,))
        response = self.client.delete(url)

        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(
            self.client.get(url).status_code, status.HTTP_404_NOT_FOUND)

    def test_query_tenant(self):
        """ 测试查询租户 """
        tenants = create_instances([
            {"name": "租户_008", "code": "tenant_008", "type": "类型_008"},
            {"name": "租户_009", "code": "tenant_009", "type": "类型_009"},
        ], "Tenant")

        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "name=租户_008")
        response = self.client.get(url)
        query_result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(tenants[0].name, query_result[0]["name"])

    def test_query_type_tenant(self):
        """ 测试查询租户类型 """
        create_instances([
            {"name": "租户_010", "code": "tenant_010", "type": "类型_010"},
            {"name": "租户_011", "code": "tenant_011", "type": "类型_010"},
        ], "Tenant")

        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "type=类型_010")
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))

    def test_query_status_tenant(self):
        """ 测试查询租户状态 """
        create_instances([
            {"name": "租户_012", "code": "tenant_012", "type": "类型_012"},
            {"name": "租户_013", "code": "tenant_013", "type": "类型_013"},
        ], "Tenant")

        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "status={0}".format(settings.STATUS_ENABLE))
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        # 默认是启用状态
        self.assertEqual(2, len(json.loads(response.content)))

    def test_query_created_tenant(self):
        """ 测试查询租户创建时间 """
        now = timezone.now()
        create_instances([
            {"name": "租户_014", "code": "tenant_014", "type": "类型_014"},
            {"name": "租户_015", "code": "tenant_015", "type": "类型_015"},
        ], "Tenant")

        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "created={0} to".format(now))
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))

    def test_query_modified_tenant(self):
        """ 测试查询用户修改时间 """
        tenants = create_instances([
            {"name": "租户_016", "code": "tenant_016", "type": "类型_016"},
            {"name": "租户_017", "code": "tenant_017", "type": "类型_017"},
        ], "Tenant")

        time.sleep(1)
        now = timezone.now()
        time.sleep(1)
        tenants[0].name = "租户_016_修改"
        tenants[0].save()

        # 查 租户_016
        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "modified={0} to".format(now))
        response = self.client.get(url)
        result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(result))
        self.assertEqual(tenants[0].name, result[0]["name"])

        # 查 租户_017
        url = "{0}?{1}".format(reverse("management:tenant-list"),
                               "modified=to {0}".format(now))
        response = self.client.get(url)
        result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(result))
        self.assertEqual(tenants[1].name, result[0]["name"])


class UserTest(APITestCase):

    def test_create_user(self):
        """ 测试创建用户 """
        tenant = create_instances([
            {"name": "租户_018", "code": "tenant_018", "type": "类型_018"},
        ], "Tenant")[0]

        url = reverse("management:user-list")
        data = {
            "name": "用户_001",
            "code": "user_001",
            "email": "user_001@mail.com",
            "password": "user123",
            "tenant": tenant.id,
        }
        response = self.client.post(url, data)
        user = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(data["name"], user["name"])
        self.assertEqual(data["code"], user["code"])
        self.assertEqual(data["email"], user["email"])
        self.assertEqual(data["password"], user["password"])
        self.assertEqual(data["tenant"], user["tenant"])

        user_tenant = User.objects.get(pk=user["id"]).tenant

        self.assertEqual(tenant.name, user_tenant.name)
        self.assertEqual(tenant.code, user_tenant.code)
        self.assertEqual(tenant.type, user_tenant.type)

    def test_user_relations(self):
        """ 测试用户关系 """
        tenant = create_instances([
            {"name": "租户_019", "code": "tenant_019", "type": "类型_019"},
        ], "Tenant")[0]
        users = create_instances([
            {
                "name": "用户_002",
                "code": "user_002",
                "email": "user_002@mail.com",
                "password": "user123",
                "tenant": tenant
            },
            {
                "name": "用户_003",
                "code": "user_003",
                "email": "user_003@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")

        self.assertEqual(users[0].tenant, users[1].tenant)
        self.assertEqual(tenant.name, users[0].tenant.name)

    def test_list_user(self):
        """ 测试用户列表 """
        tenant = create_instances([
            {"name": "租户_020", "code": "tenant_020", "type": "类型_020"},
        ], "Tenant")[0]
        create_instances([
            {
                "name": "用户_004",
                "code": "user_004",
                "email": "user_004@mail.com",
                "password": "user123",
                "tenant": tenant
            },
            {
                "name": "用户_005",
                "code": "user_005",
                "email": "user_005@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")

        url = reverse("management:user-list")
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))

    def test_update_user(self):
        """ 测试更新用户 """
        tenants = create_instances([
            {"name": "租户_021", "code": "tenant_021", "type": "类型_021"},
            {"name": "租户_022", "code": "tenant_022", "type": "类型_022"},
        ], "Tenant")
        user = create_instances([
            {
                "name": "用户_006",
                "code": "user_006",
                "email": "user_006@mail.com",
                "password": "user123",
                "tenant": tenants[0]
            }
        ], "User")[0]

        self.assertEqual(tenants[0].id, user.tenant.id)

        modified = user.modified
        user = model_to_dict(user)
        user["tenant"] = tenants[1].id
        user["owner"] = user["id"]
        url = reverse("management:user-detail", args=(user["id"],))
        response = self.client.put(url, user)

        self.assertEqual(
            response.status_code, status.HTTP_200_OK, response.content)
        self.assertEqual(tenants[1].id, json.loads(response.content)["tenant"])
        self.assertTrue(User.objects.get(pk=user["id"]).modified > modified)

    def test_delete_user(self):
        """ 测试删除用户 """
        tenant = create_instances([
            {"name": "租户_023", "code": "tenant_023", "type": "类型_023"},
        ], "Tenant")[0]
        user = create_instances([
            {
                "name": "用户_007",
                "code": "user_007",
                "email": "user_007@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")[0]
        url = reverse("management:user-detail", args=(user.id,))
        response = self.client.delete(url)

        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(
            self.client.get(url).status_code, status.HTTP_404_NOT_FOUND)

    def test_cascade_delete_user(self):
        """ 测试级联删除 """
        tenant = create_instances([
            {"name": "租户_024", "code": "tenant_024", "type": "类型_024"},
        ], "Tenant")[0]
        user = create_instances([
            {
                "name": "用户_008",
                "code": "user_008",
                "email": "user_008@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")[0]
        tenant.delete()

        self.assertEqual(
            self.client.get(reverse(
                "management:tenant-detail", args=(tenant.id,))).status_code,
            status.HTTP_404_NOT_FOUND)
        self.assertEqual(
            self.client.get(reverse(
                "management:user-detail", args=(user.id,))).status_code,
            status.HTTP_404_NOT_FOUND)

    def test_query_user(self):
        """ 测试查询用户 """
        tenant = create_instances([
            {"name": "租户_025", "code": "tenant_025", "type": "类型_025"},
        ], "Tenant")[0]
        users = create_instances([
            {
                "name": "用户_009",
                "code": "user_009",
                "email": "user_009@mail.com",
                "password": "user123",
                "tenant": tenant
            },
            {
                "name": "用户_010",
                "code": "user_010",
                "email": "user_010@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")

        url = "{0}?{1}".format(reverse("management:user-list"), "name=用户_009")
        response = self.client.get(url)
        content = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(content))
        self.assertEqual(users[0].name, content[0]["name"])
        self.assertEqual(users[0].code, content[0]["code"])
        self.assertEqual(users[0].email, content[0]["email"])

    def test_query_tenant_user(self):
        """ 测试查询用户租户 """
        tenant = create_instances([
            {"name": "租户_026", "code": "tenant_026", "type": "类型_026"},
        ], "Tenant")[0]
        users = create_instances([
            {
                "name": "用户_010",
                "code": "user_010",
                "email": "user_010@mail.com",
                "password": "user123",
                "tenant": tenant
            },
            {
                "name": "用户_011",
                "code": "user_011",
                "email": "user_011@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")

        url = "{0}?{1}".format(
            reverse("management:user-list"), "tenant={0}".format(tenant.id))
        response = self.client.get(url)
        content = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(content))
        self.assertEqual(users[0].name, content[0]["name"])
        self.assertEqual(users[1].name, content[1]["name"])

    def test_user_owner_field(self):
        """ 测试用户表中创建者字段 """
        tenant = create_instances([
            {"name": "租户_027", "code": "tenant_027", "type": "类型_027"},
        ], "Tenant")[0]
        user_12 = create_instances([
            {
                "name": "用户_012",
                "code": "user_012",
                "email": "user_012@mail.com",
                "password": "user123",
                "tenant": tenant
            }
        ], "User")[0]

        user_13 = create_instances([
            {
                "name": "用户_013",
                "code": "user_013",
                "email": "user_013@mail.com",
                "password": "user123",
                "owner": user_12,
                "tenant": tenant
            }
        ], "User")[0]

        self.assertEqual(user_13.owner.name, user_12.name)
        self.assertEqual(user_13.owner.code, user_12.code)
        self.assertEqual(user_13.owner.email, user_12.email)

    def test_user_password(self):
        """ 测试用户密码 """
        pass
