import json
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from users.models import Tenant, User
from corpus.models import CorpusBase
from .models import Meta
from area_of_jobs.models import AreaOfJob      #元数据与机构领域间的关联关系没通

class MetaTest(APITestCase):

    def create_tenants(self, tenants):
        result = []
        for tenant in tenants:
            t = Tenant(**tenant)
            t.save()
            result.append(t)

        return result

    def create_users(self, users):
        result = []
        for user in users:
            u = User(**user)
            u.save()
            result.append(u)

        return result

    def create_meta(self, metas):
        result = []
        for meta in metas:
            m = Meta(**meta)
            m.save()
            result.append(m)

        return result

    def create_corpus(self, corpus):
        result = []
        for cor in corpus:
            c = CorpusBase(**cor)
            c.save()
            result.append(c)

        return result

    def test_meta_create(self):
        """测试创建元数据"""
        url = reverse("meta:meta-list")
        data = {"code": "meta01", }
        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(["This field is required."], json.loads(response.content)["name"])

        data = {"name": "元数据01", "code": "meta01", }
        response = self.client.post(url, data)

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual("元数据01", json.loads(response.content)["name"])

        response = self.client.get(url)
        self.assertEqual("元数据01", json.loads(response.content)[0]["name"])

    def test_meta_delete(self):
        """测试删除元数据"""
        meta = self.create_meta([{
            "name": "元数据02", "code": "meta02", }, {
            "name": "元数据03", "code": "meta03", }])

        self.assertEqual("元数据02", meta[0].name)
        self.assertEqual("元数据03", meta[1].name)

        url = reverse("meta:meta-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))
        self.assertEqual("元数据02", json.loads(response.content)[0]["name"])
        self.assertEqual("元数据03", json.loads(response.content)[1]["name"])

        self.assertEqual(2, len(Meta.objects.all()))
        Meta.objects.filter(id=2).delete()
        self.assertEqual(1, len(Meta.objects.all()))

        url = reverse("meta:meta-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(json.loads(response.content)))
        self.assertEqual("元数据02", json.loads(response.content)[0]['name'])

        data = {"name": "元数据03"}
        self.assertEqual(json.loads(self.client.get(url, data).content), [])

    def test_meta_update(self):
        """测试修改元数据"""
        meta = self.create_meta([{
            "name": "元数据_0401", "code": "meta_0401", }, {
            "name": "元数据_0402", "code": "meta_0402", }])

        self.assertEqual("元数据_0401", meta[0].name)
        self.assertEqual("元数据_0402", meta[1].name)

        url = reverse("meta:meta-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(2, len(json.loads(response.content)))

        url = reverse("meta:meta-detail", args=(2,))
        data = {
            "name": "元数据_0402_修改",
            "code": "meta_0402_修改",
        }
        response = self.client.put(url, data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual("元数据_0401", Meta.objects.get(id=1).name)

        url = reverse("meta:meta-list")
        response = self.client.get(url)
        self.assertEqual("元数据_0402_修改", json.loads(response.content)[1]["name"])
        self.assertEqual("元数据_0401", json.loads(response.content)[0]["name"])

    def test__meta_query(self):
        """ 测试查询元数据 """
        meta = self.create_meta([
            {"name": "元数据05", "code": "meta05"}, ])
        url = "{0}?{1}".format(reverse("meta:meta-list"),
                               "name=元数据05")
        response = self.client.get(url)
        query_result = json.loads(response.content)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(1, len(query_result))
        self.assertEqual(meta[0].name, query_result[0]["name"])

    def test_meta_corpus_user_relations(self):
        """测试元数据与用户与租户与语料库关联关系"""
        tenant = self.create_tenants([
            {"name": "租户01", "code": "tenant01", "type": "类型01"},
        ])[0]

        user = self.create_users([
            {
                "name": "用户01",
                "code": "user01",
                "email": "user01@mail.com",
                "password": "user123",
                "tenant": tenant
            },
        ])[0]

        aoj = AreaOfJob(name="机构01", code="jigou01",
                        owner= user,  tenant=tenant).save()

        corpus = self.create_corpus([
            {
                "name": "语料库01",
                "code": "corpus01",
                "owner": user,
                "tenant": tenant,
                "area_of_job": aoj,
            }
        ])[0]

        meta = self.create_meta([
            {
                "name": "元数据06",
                "code": "meta06",
                "owner": user,
                "tenant": tenant,
                "corpusbase": corpus,
            },
            {
                "name": "元数据07",
                "code": "meta07",
                "owner": user,
                "tenant": tenant,
                "corpusbase": corpus,
            }
        ])

        """测试元数据和租户间的关系"""
        self.assertEqual(meta[0].tenant, meta[1].tenant)
        self.assertEqual(meta[0].tenant.name, tenant.name)
        self.assertEqual(meta[1].tenant.name, tenant.name)
        """测试元数据和用户间的关系"""
        self.assertEqual(meta[0].owner, meta[1].owner)
        self.assertEqual(meta[0].owner.name, user.name)
        self.assertEqual(meta[1].owner.name, user.name)
        """测试元数据和语料库间的关系"""
        self.assertEqual(meta[0].corpusbase, meta[1].corpusbase)
        self.assertEqual(meta[0].corpusbase.name, corpus.name)
        self.assertEqual(meta[1].corpusbase.name, corpus.name)
        """测试元数据中租户和用户间的关系"""
        self.assertEqual(tenant.name, user.tenant.name)
        self.assertEqual(meta[1].owner.tenant.name, tenant.name)
        self.assertEqual(meta[1].owner.tenant.name, user.tenant.name)
        # """测试元数据和机构领域间的关系"""   #元数据与机构领域间的关联关系没通
        # self.assertEqual(meta[0].corpusbase.area_of_job, meta[1].corpusbase.area_of_job)
        # self.assertEqual(meta[0].corpusbase.name, corpus.name)
        # self.assertEqual(meta[1].corpusbase.name, corpus.name)